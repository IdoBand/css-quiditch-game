@use '../../_globals.scss' as globals;

$boxColor: rgba(53, 59, 59, 0.467);
$tower-base-length: 0.8em;

@mixin height($height) {
  @keyframes identifier {
    0% { height: 0em }
    100% { height: $height }
  }
  animation: identifier globals.$cubeSpeed linear forwards;
}

@mixin cube-props {
  position: absolute;
  
}

@mixin tower-props {
  
  position: absolute;
}
// (-0.5 * $tower-base-length) is used to center the tower with the Y axis
.tower-pos-a {
  @include tower-props;
  left: (-0.5 * $tower-base-length) + 1.5em;
  transform: translateZ(-5.5em) translateY(1.5em) rotateY(-5deg);
}
.tower-pos-b {
  @include tower-props;
  left: (-0.5 * $tower-base-length) + 5.5em;
  transform: translateZ(-5em) translateY(1.5em) rotateY(-15deg);
}
.tower-pos-c {
  @include tower-props;
  left: (-0.5 * $tower-base-length) + 8.5em;
  transform: translateZ(-4em) translateY(1.5em) rotateY(-30deg);
}
.tower-pos-d {
  @include tower-props;
  left: (-0.5 * $tower-base-length) + 11em;
  transform: translateZ(-2.5em) translateY(1.5em) rotateY(-55deg);
}
.tower-pos-e {
  @include tower-props;
  left: (-0.5 * $tower-base-length) - 1.5em;
  transform: translateZ(-5.5em) translateY(1.5em) rotateY(-5deg);
}
.tower-pos-f {
  @include tower-props;
  left: (-0.5 * $tower-base-length) - 5.5em;
  transform: translateZ(-5em) translateY(1.5em) rotateY(15deg);
}
.tower-pos-g {
  @include tower-props;
  left: (-0.5 * $tower-base-length) - 8.5em;
  transform: translateZ(-4em) translateY(1.5em) rotateY(30deg);
}
.tower-pos-h {
  @include tower-props;
  left: (-0.5 * $tower-base-length) - 11em;
  transform: translateZ(-2.5em) translateY(1.5em) rotateY(55deg);
}

.base {
  @include cube-props;
  width: $tower-base-length;
  height: 0;
  animation: baseHeight globals.$cubeSpeed linear forwards;
  animation-delay: 1s;
}
@keyframes baseHeight {
  0% { height: 0 }
  100% { height: 4.5 * $tower-base-length}
}

.base-rectangle {
  position: absolute;
  box-shadow: 0 0 0.5em #000a inset;
  height: 100%;
  width: 100%;
  background-size: 100%, $tower-base-length $tower-base-length;
}
.base-rectangle.front { transform: translateZ(0.5 * $tower-base-length); }
.base-rectangle.right { transform: rotateY(90deg) translateZ(0.5 * $tower-base-length); }
.base-rectangle.left { transform: rotateY(270deg) translateZ(0.5 * $tower-base-length); }
.base-rectangle.back { transform: rotateY(180deg) translateZ(0.5 * $tower-base-length); }

.base-rectangle.top {
  position: absolute;
  box-shadow: 0 0 0.5em #000a inset;
  transform: translateY(-50%) rotateX(90deg);
  width: $tower-base-length;
  height: $tower-base-length;
  background: $boxColor;
  opacity: 0;
  animation: opa globals.$cubeSpeed linear forwards;
}

.stand {
  @include cube-props;
  bottom: 0;
  width: $tower-base-length;
  height: 0;
  animation: standHeight globals.$cubeSpeed linear forwards;
  animation-delay: 2s;
}

@keyframes standHeight {
  0% { height: 0 }
  100% { height: 1.5 * $tower-base-length }
}
@keyframes opa {
  0% { opacity: 0;}
  100% { opacity: 1;}
}

.left-side-trapezoid-down {
  position: absolute;
  bottom: 0;
  width: $tower-base-length; /* Base width */
  height: 50%; /* Height of the trapezoid */
  background-size: 100%, $tower-base-length $tower-base-length;
  clip-path: polygon(75% 0%, 100% 0%, 100% 100%, 0% 100%);
  transform: rotateY(90deg) translateZ(0.5 * $tower-base-length);
}

.left-side-trapezoid-up {
  position: absolute;
  bottom: 0.7em;
  width: $tower-base-length; /* Base width */
  height: 50%; /* Height of the trapezoid */
  background-size: 100%, $tower-base-length $tower-base-length;
  clip-path: polygon(0 0, 25% 0, 100% 100%, 0% 100%);
  transform: rotateZ(180deg) rotateY(-90deg) translateZ(0.5 * $tower-base-length);
}

.right-side-trapezoid-down {
  position: absolute;
  bottom: 0;
  width: $tower-base-length; /* Base width */
  height: 0.75 * $tower-base-length; /* Height of the trapezoid */
  background-size: 100%, $tower-base-length $tower-base-length;
  clip-path: polygon(0 0, 25% 0, 100% 100%, 0% 100%);
  transform: rotateY(-90deg) translateZ(0.5 * $tower-base-length);
}

.right-side-trapezoid-up {
  position: absolute;
  bottom: 0.7em;
  width: $tower-base-length; /* Base width */
  height: 0.75 * $tower-base-length; /* Height of the trapezoid */
  background-size: 100%, $tower-base-length $tower-base-length;
  clip-path: polygon(75% 0%, 100% 0%, 100% 100%, 0% 100%);
  transform: rotateZ(180deg) rotateY(90deg) translateZ(0.5 * $tower-base-length);
}
.stand-back {
  position: absolute;
  bottom: 0;
  height: 100%;
  width: $tower-base-length;
  animation: opa 2s linear forwards;
  animation-delay: 2s;
  transform: rotateY(180deg) translateZ(0.5em);
}

.roof {
  @include cube-props;
  position: relative;
  bottom: 0;
  bottom: 1.5 * $tower-base-length;
  height: 0;
}
.roof-triangle {
  position: absolute;
  width: $tower-base-length;
  height: $tower-base-length;
  clip-path: polygon(50% 0%, 0% 100%, 100% 100%);
}

.roof-triangle.front {
  transform: translateZ(0.3em) rotateX(25deg)
}
.roof-triangle.back {
  transform: translateZ(-0.3em) rotateX(-25deg)
}
.roof-triangle.left {
  transform: rotateY(-90deg) rotateX(23deg) translateZ(0.5 * $tower-base-length)
}
.roof-triangle.right {
  transform: rotateY(90deg) rotateX(23deg) translateZ(calc((0.5 * $tower-base-length) - 0.4em));
}

.slytherin {
  background-image: globals.$slytherin-color;
}
.ravenclaw {
  background-image: globals.$ravenclaw-color;
}
.gryffindor {
  background-image: globals.$gryffindor-color;
}
.huflpuff {
  background-image: globals.$huflpuff-color;
}

////////////////////////////////////////////////
///  KEEP IN CASE TRAPEZOID WONT WORK
////////////////////////////////////////////////
.left-side-triangle-down {
  border-left: 0px solid transparent; /* Adjust the size */
  border-right: 50px solid transparent; /* Adjust the size */
  border-bottom: 100px solid #3498db; /* Color and height of the trapezoid */
  position: absolute;
  
}

.right-side-triangle-down {
  border-left: 50px solid transparent; /* Adjust the size */
  border-right: 0px solid transparent; /* Adjust the size */
  border-bottom: 100px solid hotpink; /* Color and height of the trapezoid */
  position: absolute;
  transform: rotateY(270deg) translateZ(0.5em);
}